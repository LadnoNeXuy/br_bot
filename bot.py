import asyncio
from aiogram import Bot, Dispatcher, types, F
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from config import BOT_TOKEN, CHAT_ID
from scheduler import check_and_congratulate


bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


def escape_markdown(text: str) -> str:
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è parse_mode="Markdown"
    escape_chars = r'\_*[]()'
    return ''.join(f'\\{c}' if c in escape_chars else c for c in text)


async def start_handler(message: types.Message):
    await message.answer("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", parse_mode="Markdown")


dp.message.register(start_handler, F.text == "/start")


async def main():
    scheduler = AsyncIOScheduler()
    loop = asyncio.get_running_loop()

    def job_wrapper():
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É –≤ event loop –∏–∑ –¥—Ä—É–≥–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        asyncio.run_coroutine_threadsafe(check_and_congratulate(bot), loop)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:55 (–∏–ª–∏ –ø–æ–º–µ–Ω—è–π –ø–æ —Å–≤–æ–µ–º—É)
    scheduler.add_job(job_wrapper, CronTrigger(hour=8, minute=15))
    scheduler.start()

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥–µ—Ç 10:55 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π.")

    try:
        await dp.start_polling(bot)
    except (KeyboardInterrupt, asyncio.CancelledError):
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())
